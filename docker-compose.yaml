name: microcosm

services:

  db:
    image: postgres:14-alpine
    restart: always
    environment:
      POSTGRES_USER: microcosm
      POSTGRES_DB: microcosm_development
      POSTGRES_PASSWORD: microcosm_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: nc -z localhost 5432
    ports:
      - 127.0.0.1:5432:5432
    networks:
      - micronet

  memcached:
    image: memcached:1.6-alpine
    restart: always
    healthcheck:
      test: nc -z localhost 11211
    networks:
      - micronet

  localstack:
    image: localstack/localstack:s3-latest
    ports:
      - 127.0.0.1:4566:4566
    environment:
      DEBUG: 1
    networks:
      - micronet
    volumes:
      - localstack-data:/var/lib/localstack
      # - /var/run/docker.sock:/var/run/docker.sock

  localstack-init:
    image: amazon/aws-cli
    depends_on:
      - localstack
    environment:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      AWS_DEFAULT_REGION: us-east-1
    networks:
      - micronet
    entrypoint: >
      /bin/sh -c "
      sleep 5 &&
      aws --endpoint-url=http://localstack:4566 s3 mb s3://dev-object-store &&
      echo 'S3 bucket created and initialized'
      "

  # elastic-search:
  #   image: elasticsearch:7.13.1
  #   restart: always
  #   environment:
  #     discovery.type: single-node
  #   networks:
  #     - micronet

  api:
    build:
      context: ../microcosm
      dockerfile: dockerfiles/dev.Dockerfile
    depends_on:
      - db
      - memcached
      - localstack
      # - elastic-search
    healthcheck:
      test: nc -z localhost 80
    restart: always
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: postgres://microcosm:microcosm_password@db:5432/microcosm_development
      GOOSE_MIGRATION_DIR: ./db/migrations
    ports:
      - 127.0.0.1:8080:80
    networks:
      micronet:
        aliases:
          - microcosm.app
          - root.microcosm.app
          - dev1.microcosm.app
          - dev2.microcosm.app
          - localhost.microcosm.app
    develop:
      watch:
        - action: rebuild
          path: ../microcosm

  web:
    build:
      context: ../microweb
      dockerfile: dockerfiles/dev.Dockerfile
    depends_on:
      - memcached
      - api
    # extra_hosts:
    #   - "dev1.microcosm.app:127.0.0.1"
    restart: always
    environment:
      API_SCHEME: http://
      MEMCACHE_HOST: memcached
      NEW_RELIC_CONFIG_FILE: ./newrelic.ini
    ports:
      - 127.0.0.1:80:80
    networks:
      - micronet
    develop:
      watch:
        - action: rebuild
          path: ../microweb/requirements.txt
        - action: sync
          path: ../microweb
          target: /app

networks:
  micronet:

volumes:
  postgres-data:
    driver: local
  localstack-data:
    driver: local
